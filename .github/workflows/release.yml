name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get release version #получаем версию релиза
        id: get_version
        run: echo "::set-output name=version::${GITHUB_REF#refs/tags/v}"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install dependencies
        run: npm ci

      - name: Check version and tag match
        run: |
          RELEASE_VERSION="${{ steps.get_version.outputs.version }}"
          RELEASE_TAG="${{ github.ref }}"
          echo "RELEASE_VERSION: $RELEASE_VERSION"
          echo "RELEASE_TAG: $RELEASE_TAG"
          if [[ "v${RELEASE_VERSION}" == "${RELEASE_TAG#refs/tags/}" ]]; then
            echo "Release version matches release tag"
          else
            echo "Error: Release version does not match release tag"
            exit 1
          fi

      # - name: Changelog generate
      #   uses: orhun/git-cliff-action@v2
      #   id: git-cliff
      #   with:
      #     config: cliff.toml
      #     args: --latest

      # - name: Print the changelog
      #   run: echo "${{ steps.git-cliff.outputs.content }}"

      - name: Get Current Tag
        id: get_tag
        run: |
          current_tag=$(echo "${GITHUB_REF}" | awk -F/ '{print $3}')
          prev_tag=$(git describe --abbrev=0 --match="v*" --tags HEAD^)
          echo "current_tag=$current_tag">>"$GITHUB_ENV"
          echo "prev_tag=$prev_tag">>"$GITHUB_ENV"

      - name: Display Current and Previous Tags
        run: |
          echo "Current Tag: $current_tag"
           echo "Previous Tag: $prev_tag"

      - name: Changelog
        id: Changelog
        run: |
          git_log=$(git log --pretty=format:"- %s" "${{ env.prev_tag }}..${{ env.current_tag }}")
          echo "::set-output name=Changelog::${git_log}"

      - name: Run release script
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          CHANGES: ${{ steps.Changelog.outputs.Changelog }}
        run: npm run injector

      - name: Build
        run: npm run build

      - name: Deploy to GitHub Pages
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name "Daniil Petrov"
          git config --global user.email "petrov082011@mail.ru"
          git checkout --orphan gh-pages
          git rm -rf .
          cp -R build/* .
          git add -A
          git commit -m "Deploy to GitHub Pages"
          git push origin gh-pages --force
